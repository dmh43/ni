CLI entry point.
Some custom toplevel option handlers and the main function that ni uses to
parse CLI options and execute the data pipeline.

our %cli_special;
sub defclispecial($$) {$cli_special{$_[0]} = fn $_[1]}

Development options.
Things useful for developing ni.

defclispecial '--dev/eval', q{print ni::eval($_[0], "anon $_[0]"), "\n"};
defclispecial '--dev/parse', q{
  dev_trace 'ni::parse';
  cli_parse @_;
};

defclispecial '--dev/parse-one', q{
  dev_trace 'ni::parse';
  parse ni::eval($_[0]), @_[1..$#_];
};

Extensions.
Options to extend and modify the ni image.

defclispecial '--internal/lib', q{extend_self 'lib', $_[0]};
defclispecial '--lib', q{intern_lib shift; goto \&main};

defclispecial '--run', q{
  $ni::self{"transient/eval"} .= "\n$_[0]\n";
  ni::eval $_[0], "--run $_[0]";
  shift;
  goto \&main;
};

Documentation.

defclispecial '--explain', q{
  my ($r, @rest) = cli_parse @_;
  print "UNPARSED: @rest\n" if @rest;
  if (ref $r) {
    print json_encode($_), "\n" for flatten_operators $r;
  }
};

defclispecial '--explain-meta', q{
  my ($r, @rest) = cli_parse @_;
  print "UNPARSED: @rest\n" if @rest;
  if (ref $r) {
    print json_encode($_), "\n" for apply_meta_operators flatten_operators $r;
  }
};

Root CLI context.
This is used by extensions that define long and short options.

defcontext '';

Main stuff.
sub main() is called by the ni boot header on @ARGV. I've separated
$main_operator so it can be extended to handle various cases; for instance, ni
launches a pager when its output is connected to a terminal, etc. This is
handled by core/stream.

our $main_operator = sub {die "ni: no main operator defined (your ni is broken)"};

sub main {
  my ($cmd, @args) = @_;
  $ni::is_toplevel = 1;

  @_ = ('//help', @_[1..$#_])
    if -t STDIN and -t STDOUT and !@_ || $_[0] =~ /^-h$|^-\?$|^--help$/;

  if (exists $ENV{HOME} && !exists $ENV{NI_NO_HOME} && -d "$ENV{HOME}/.ni") {
    eval {intern_lib "$ENV{HOME}/.ni"};
    if ($@) {
      print STDERR "ni: note: failed to load ~/.ni as a library: $@\n";
      print STDERR "    (export NI_NO_HOME to disable ~/.ni autoloading,\n";
      print STDERR "     or run `ni //help/libraries` for details about libraries)\n";
    }
  }

  return $cli_special{$cmd}->(@args) if defined $cmd && exists $cli_special{$cmd};

  my ($r, @rest) = cli_parse @_;
  return &$main_operator(flatten_operators $r) if !@rest && ref $r;

  print STDERR "ni: failed to parse starting here (ni --dev/parse to trace):\n";
  print STDERR "  @rest\n";
  print STDERR "If ni is failing to parse a filename, start it with /, ./,\n";
  print STDERR "or file:// to qualify it.\n";
  exit 1;
}

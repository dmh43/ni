Parser combinators.
List-structured combinators. These work like normal parser combinators, but are
indirected through data structures to make them much easier to inspect. This
allows ni to build an operator mapping table.

our %parsers;
BEGIN {defdocumentable 'parser', \%parsers}

docparser ARRAY => fn q{
  my ($p) = @_;
  my ($pname, @args) = @$p;
  my $doc = $ni::doc{parser}{$pname};
  ref $doc ? $doc->($p) : $doc;
};

sub parser($) {
  die "ni: parser $_[0] is not defined" unless exists $parsers{$_[0]};
  [$_[0]];
}

sub defparser($$$) {
  my ($name, $proto, $f) = @_;
  (my $code_name = $name) =~ s/\W+/_/g;
  die "ni: defparser cannot redefine $name" if exists $parsers{$name};
  $parsers{$name} = fn $f;
  eval "sub $code_name($proto) {['$name', \@_]}";
}

sub defparseralias($$) {
  my ($name, $alias) = @_;
  (my $code_name = $name) =~ s/\W+/_/g;
  die "ni: defparseralias cannot redefine $name" if exists $parsers{$name};
  $parsers{$name} = $alias;
  eval "sub $code_name() {['$name']}" unless exists ${ni::}{$code_name};
  docparser $name, parser_doc $alias;
}

our $recursion_level = 0;

sub parse;
sub parse {
  local $_;
  local $recursion_level = $recursion_level + 1;
  my ($p, @args) = @{$_[0]};
  die "ni: runaway parse of $p on @_[1..$#_] ($recursion_level levels)"
    if $recursion_level > 1024;
  my $f = $parsers{$p} or die "ni: no such parser: $p";
  return @_[1..$#_] if @_ > 1 && ref $_[1];
  'ARRAY' eq ref $f ? parse $f, @_[1..$#_] : &$f(@_);
}

Base parsers.
Stuff for dealing with some base cases.

c
BEGIN {
  defparser 'pend',   '',  q{@_ > 1                        ? () : (0)};
  defparser 'pempty', '',  q{defined $_[1] && length $_[1] ? () : (0, @_[2..$#_])};
  defparser 'pk',     '$', q{(${$_[0]}[1], @_[1..$#_])};
  defparser 'pnone',  '',  q{(undef,       @_[1..$#_])};
}

docparser pend   => q{<end of ARGV>};
docparser pempty => q{<empty arg>};
docparser pk     => fn q{"<'', evaluate as $_[0]>"};
docparser pnone  => q{''};

Basic combinators.
Sequence, alternation, etc. 'alt' implies a sequence of alternatives; 'dsp' is
a dispatch on specified prefixes. The 'r' suffix means that the parser
combinator takes a reference to a collection; this allows you to modify the
collection later on to add more alternatives.

c
BEGIN {
  defparser 'paltr', '\@',
    q{my ($self, @xs, @ps, @r) = @_;
      @r = parse $_, @xs and return @r for @ps = @{$$self[1]}; ()};

  defparser 'pdspr', '\%',
    q{my ($self, $x, @xs, $k, @ys, %ls, $c) = @_;
      my (undef, $ps) = @$self;
      return () unless defined $x;
      ++$ls{length $_} for keys %$ps;
      for my $l (sort {$b <=> $a} keys %ls) {
        return (@ys = parse $$ps{$c}, substr($x, $l), @xs) ? @ys : ()
        if exists $$ps{$c = substr $x, 0, $l} and $l <= length $x;
      }
      ()};
}

sub palt(@) {my @ps = @_; paltr @ps}
sub pdsp(%) {my %ps = @_; pdspr %ps}

docparser paltr => fn q{
  my ($self, $alt) = @{$_[0]};
  my @docs = map indent(parser_doc $_, 2), @$alt;
  join "\n| ", @docs;
};

docparser pdspr => fn q{
  my ($self, $dsp) = @{$_[0]};
  my @docs = map indent("'$_' " . parser_doc $$dsp{$_}, 2), sort keys %$dsp;
  join "\n| ", @docs;
};

c
BEGIN {
  defparser 'pseq', '@',
    q{my ($self, @is, $x, @xs, @ys) = @_;
      my (undef, @ps) = @$self;
      (($x, @is) = parse $_, @is) ? push @xs, $x : return () for @ps;
      (\@xs, @is)};

  defparser 'prep', '$;$',
    q{my ($self, @is, @c, @r) = @_;
      my (undef, $p, $n) = (@$self, 0);
      push @r, $_ while ($_, @is) = parse $p, (@c = @is);
      @r >= $n ? (\@r, @c) : ()};

  defparser 'popt', '$',
    q{my ($self, @is) = @_;
      my @xs = parse $$self[1], @is; @xs ? @xs : (undef, @is)};

  defparser 'pmap', '$$',
    q{my ($self, @is) = @_;
      my (undef, $f, $p) = @$self;
      $f = fn $f;
      my @xs = parse $p, @is; @xs ? (&$f($_ = $xs[0]), @xs[1..$#xs]) : ()};

  defparser 'pcond', '$$',
    q{my ($self, @is) = @_;
      my (undef, $f, $p) = @$self;
      $f = fn $f;
      my @xs = parse $p, @is; @xs && &$f($_ = $xs[0]) ? @xs : ()};
}

docparser pseq => fn q{
  my ($self, @ps) = @{$_[0]};
  '( ' . join(' ', map parser_doc $_, @ps) . ' )';
};

docparser prep => fn q{
  my ($self, $p, $n) = (@{$_[0]}, 0);
  my $rep_symbol = $n == 0 ? '*' : $n == 1 ? '+' : "{$n+ times}";
  parser_doc($p) . "$rep_symbol";
};

docparser popt => fn q{
  my ($self, $p) = @{$_[0]};
  parser_doc($p) . '?';
};

docparser pmap => fn q{
  my ($self, $f, $p) = @{$_[0]};
  parser_doc($p) . "->{$f}";
};

docparser pcond => fn q{
  my ($self, $f, $p) = @{$_[0]};
  parser_doc($p) . "->if{$f}";
};

sub pn($@)
{ my ($n, @ps) = @_;
  'ARRAY' eq ref $n ? pmap fn "[\@\$_[" . join(',', @$n) . "]]", pseq @ps
                    : pmap fn "\$\$_[$n]", pseq @ps }

sub pc($) {pn 0, $_[0], popt pempty}

Regex parsing.
Consumes the match, returning either the matched text or the first match group
you specify. Always matches from the beginning of a string.

c
BEGIN {
  defparser 'prx', '$',
    q{my ($self, $x, @xs) = @_;
      defined $x && $x =~ s/^($$self[1])// ? (dor($2, $1), $x, @xs) : ()};

  defparser 'pnx', '$',
    q{my ($self, $x, @xs) = @_;
      defined $x && $x =~ /^(?:$$self[1])/ ? () : ($x, @xs)};
}

sub prc($) {pn 0, prx qr/$_[0]/, popt pempty}

docparser prx => fn q{
  my ($self, $r) = @{$_[0]};
  '/' . qr/$r/ . '/';
};

docparser pnx => fn q{
  my ($self, $r) = @{$_[0]};
  '!/' . qr/$r/ . '/';
};

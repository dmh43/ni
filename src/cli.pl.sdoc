CLI grammar.
ni's command line grammar uses some patterns on top of the parser combinator
primitives defined in parse.pl.sdoc. Probably the most important one to know
about is the long/short option dispatch, which looks like this:

| option = alt @longs, dsp %shorts

our %contexts;
our %shorts;
our %longs;
our %long_names;
our %long_refs;
our %short_refs;
our %dsps;
our %alts;

c
BEGIN {
  defdocumentable context => \%contexts;
  defdocumentable short   => \%shorts;
  defdocumentable long    => \%longs;
  defdocumentable dsp     => \%dsps;
  defdocumentable alt     => \%alts;
}

sub defcontext($$) {
  my ($c, $doc) = @_;
  $short_refs{$c} = {};
  $long_refs{$c}  = [pdspr %{$short_refs{$c}}];
  $long_names{$c} = ['<short dispatch>'];
  $contexts{$c}   = paltr @{$long_refs{$c}};

  doccontext $c, $doc;

  defparseralias "$c/short",  pdspr %{$short_refs{$c}};
  defparseralias "$c/op",     $contexts{$c};
  docparser "$c/short", "<$c/short>";
  docparser "$c/op",    "<$c/op>";

  defparseralias "$c/suffix", prep $contexts{$c};
  defparseralias "$c/series", prep pn 1, popt pempty, $contexts{$c}, popt pempty;
  defparseralias "$c/lambda", pn 1, prc qr/\[/, parser "$c/series", prx qr/\]/;
  defparseralias "$c/qfn",    palt parser "$c/lambda", parser "$c/suffix";

  defparseralias "$c/cli", pn 0, parser "$c/series", pend;
  defparseralias "$c/cli_debug", parser "$c/series";
}

sub defshort($$) {
  my ($context, $dsp) = split /\//, $_[0], 2;
  warn "ni: defshort is redefining '$_[0]' (use rmshort to avoid this warning)"
    if exists $short_refs{$context}{$dsp};
  defparseralias "$context/short/$dsp" => $_[1];
  $shorts{$_[0]} = $short_refs{$context}{$dsp} = ["$context/short/$dsp"];
}

sub deflong($$) {
  my ($context, $name) = split /\//, $_[0], 2;
  defparseralias "$context/long/$name" => $_[1];
  unshift @{$long_names{$context}}, $name;
  unshift @{$long_refs{$context}}, $longs{$_[0]} = ["$context/long/$name"];
}

sub rmshort($) {
  my ($context, $dsp) = split /\//, $_[0], 2;
  delete $shorts{$_[0]};
  delete $short_refs{$context}{$dsp};
  delete $ni::parsers{"$context/short/$dsp"};
}

sub cli_parse(@) {parse parser '/cli_debug', @_}
sub cli(@) {
  my ($r, @rest) = cli_parse @_;
  die "ni: failed to parse starting here:\n  @rest" if @rest;
  $r;
}

Extensible parse elements.
These patterns come up a lot, and it's worth being able to autogenerate their
documentation.

sub defalt($$@) {
  no strict 'refs';
  my ($name, $doc, @entries) = @_;
  my $vname = __PACKAGE__ . "::$name";
  docalt $name, $doc;
  @{$vname} = @entries;
  $alts{$name} = \@{$vname};
  *{__PACKAGE__ . "::def$name"} = sub ($) {unshift @{$vname}, $_[0]};
  paltr @{$vname};
}

sub defdsp($$%) {
  no strict 'refs';
  my ($name, $doc, %entries) = @_;
  my $vname = __PACKAGE__ . "::$name";
  docdsp $name, $doc;
  %{$vname} = %entries;
  $dsps{$name} = \%{$vname};
  *{__PACKAGE__ . "::def$name"} = sub ($$) {${$vname}{$_[0]} = $_[1]};
  pdspr %{$vname};
}

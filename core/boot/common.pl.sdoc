Regex parsing.
Sometimes we'll have an operator that takes a regex, which is subject to the
CLI reader problem the same way code arguments are. Rather than try to infer
brackets the same way, we just require that regexes are terminated with /
(which should be ok because that's also how they typically start).

c
BEGIN {defparseralias regex => pmap q{s/\/$//; $_}, prx qr{^(?:[^\\/]+|\\.)*/}}

Generic code parser.
Counts brackets outside quoted strings, which in our case are '' and "".
Doesn't look for regular expressions because these vary by language; but this
parser should be able to handle most straightforward languages with quoted
string literals and backslash escapes.

defparser 'generic_code', '',
  sub {my ($self, $code, @xs) = @_;
       return ($code, '', @xs) unless $code =~ /\]$/;
       (my $tcode = $code) =~ s/"([^"\\]+|\\.)"|'([^'\\]+|\\.)'//g;
       my $balance = length(sgr $tcode, qr/[^[]/, '') - length(sgr $tcode, qr/[^]]/, '');
       $balance ? (substr($code, 0, $balance), substr($code, $balance), @xs)
                : ($code, '', @xs)};

Basic CLI types.
Some common argument formats for various commands, sometimes transformed for
specific cases. These are documented somewhere in `doc/`.

A parsed column spec is an N-element array: [floor, cols...]. `floor` indicates
the first column that would be selected by a `.` ("the rest").

c
BEGIN {defparseralias neval => pmap q{eval}, prx '=([^]=]+)'}
BEGIN {defparseralias integer => palt pmap(q{int},       neval),
                                      pmap(q{10 ** $_},  prx 'E(-?\d+)'),
                                      pmap(q{1 << $_},   prx 'B(\d+)'),
                                      pmap(q{0 + "0$_"}, prx 'x[0-9a-fA-F]+'),
                                      pmap(q{0 + $_},    prx '-?[1-9]\d*(?:[eE]\d+)?'),
                                                         prx '0'}
BEGIN {defparseralias float => pmap q{0 + $_},
                               pcond q{length},
                               prx '-?(?:\d+(?:\.\d*)?|\d*\.\d+)(?:[eE][-+]?\d+)?'}
BEGIN {defparseralias number => palt neval, float, integer}

c
BEGIN {defparseralias colspec1      => palt pn(1, prx '#', integer),
                                            pmap q{ord() - 65}, prx '[A-Z]';
       defparseralias colspec_rest  => pmap q{-1}, prx '\.'}
BEGIN {defparseralias colspec_range => pmap q{[$$_[0] .. $$_[2]]},
                                       pseq colspec1, prx '-', colspec1}
BEGIN {defparseralias colspec_fixed => pmap q{[max(@$_) + 1, @$_]},
                                       pmap q{[map ref() ? @$_ : $_, @$_]},
                                       prep pn(1, popt prx ',',
                                                  palt(colspec_range, colspec1)), 1}
BEGIN {defparseralias colspec => pmap q{[max(@$_) + 1, @$_]},
                                 pmap q{[map ref() ? @$_ : $_, @$_]},
                                 prep pn(1, popt prx ',',
                                            palt(colspec_range, colspec1, colspec_rest)), 1}

Filenames, in general.
Typically filenames won't include bracket characters, though they might include
just about everything else. Two possibilities there: if we need special stuff,
there's the `file://` prefix; otherwise we assume the non-bracket
interpretation.

c
BEGIN {defparseralias filename   => palt prx 'file://(.+)',
                                         prx '\.?/(?:[^/]|$)[^]]*',
                                         pcond q{-e}, prx '[^][]+'}
BEGIN {defparseralias nefilename => palt filename, prx '[^][]+'}
